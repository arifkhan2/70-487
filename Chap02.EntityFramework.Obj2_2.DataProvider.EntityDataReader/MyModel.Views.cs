//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Chap02.EntityFramework.Obj2_2.DataProvider.EntityDataReader.TestModelEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets66bfc68de8ba74ce07f9f1b6fbd1b13982a65c541cfb8c41229b64f7aadc6d91))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets66bfc68de8ba74ce07f9f1b6fbd1b13982a65c541cfb8c41229b64f7aadc6d91 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "66bfc68de8ba74ce07f9f1b6fbd1b13982a65c541cfb8c41229b64f7aadc6d91"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "TestModelModelStoreContainer.Account")
            {
                return GetView0();
            }

            if (extentName == "TestModelModelStoreContainer.Customer")
            {
                return GetView1();
            }

            if (extentName == "TestModelModelStoreContainer.Transaction")
            {
                return GetView2();
            }

            if (extentName == "TestModelModelStoreContainer.TransactionDetail")
            {
                return GetView3();
            }

            if (extentName == "TestModelEntities.Accounts")
            {
                return GetView4();
            }

            if (extentName == "TestModelEntities.Customers")
            {
                return GetView5();
            }

            if (extentName == "TestModelEntities.Transactions")
            {
                return GetView6();
            }

            if (extentName == "TestModelEntities.TransactionDetails")
            {
                return GetView7();
            }

            if (extentName == "TestModelModelStoreContainer.sysdiagrams")
            {
                return GetView8();
            }

            if (extentName == "TestModelEntities.sysdiagrams")
            {
                return GetView9();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for TestModelModelStoreContainer.Account.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account
        [TestModelModel.Store.Account](T1.Account_AccountId, T1.Account_AccountAlias, T1.Account_CreatedDate)
    FROM (
        SELECT 
            T.AccountId AS Account_AccountId, 
            T.AccountAlias AS Account_AccountAlias, 
            T.CreatedDate AS Account_CreatedDate, 
            True AS _from0
        FROM TestModelEntities.Accounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelModelStoreContainer.Customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customer
        [TestModelModel.Store.Customer](T1.Customer_CustomerId, T1.Customer_AccountId, T1.Customer_FirstName, T1.Customer_LastName)
    FROM (
        SELECT 
            T.CustomerId AS Customer_CustomerId, 
            T.AccountId AS Customer_AccountId, 
            T.FirstName AS Customer_FirstName, 
            T.LastName AS Customer_LastName, 
            True AS _from0
        FROM TestModelEntities.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelModelStoreContainer.Transaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transaction
        [TestModelModel.Store.Transaction](T1.Transaction_TransactionId, T1.Transaction_CustomerId, T1.Transaction_TransactionDate, T1.Transaction_Amount)
    FROM (
        SELECT 
            T.TransactionId AS Transaction_TransactionId, 
            T.CustomerId AS Transaction_CustomerId, 
            T.TransactionDate AS Transaction_TransactionDate, 
            T.Amount AS Transaction_Amount, 
            True AS _from0
        FROM TestModelEntities.Transactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelModelStoreContainer.TransactionDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionDetail
        [TestModelModel.Store.TransactionDetail](T1.TransactionDetail_Detailid, T1.TransactionDetail_TransactionId, T1.TransactionDetail_Vendor, T1.TransactionDetail_ItemDescription)
    FROM (
        SELECT 
            T.Detailid AS TransactionDetail_Detailid, 
            T.TransactionId AS TransactionDetail_TransactionId, 
            T.Vendor AS TransactionDetail_Vendor, 
            T.ItemDescription AS TransactionDetail_ItemDescription, 
            True AS _from0
        FROM TestModelEntities.TransactionDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelEntities.Accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Accounts
        [TestModelModel.Account](T1.Account_AccountId, T1.Account_AccountAlias, T1.Account_CreatedDate)
    FROM (
        SELECT 
            T.AccountId AS Account_AccountId, 
            T.AccountAlias AS Account_AccountAlias, 
            T.CreatedDate AS Account_CreatedDate, 
            True AS _from0
        FROM TestModelModelStoreContainer.Account AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelEntities.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [TestModelModel.Customer](T1.Customer_CustomerId, T1.Customer_AccountId, T1.Customer_FirstName, T1.Customer_LastName)
    FROM (
        SELECT 
            T.CustomerId AS Customer_CustomerId, 
            T.AccountId AS Customer_AccountId, 
            T.FirstName AS Customer_FirstName, 
            T.LastName AS Customer_LastName, 
            True AS _from0
        FROM TestModelModelStoreContainer.Customer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelEntities.Transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transactions
        [TestModelModel.Transaction](T1.Transaction_TransactionId, T1.Transaction_CustomerId, T1.Transaction_TransactionDate, T1.Transaction_Amount)
    FROM (
        SELECT 
            T.TransactionId AS Transaction_TransactionId, 
            T.CustomerId AS Transaction_CustomerId, 
            T.TransactionDate AS Transaction_TransactionDate, 
            T.Amount AS Transaction_Amount, 
            True AS _from0
        FROM TestModelModelStoreContainer.Transaction AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelEntities.TransactionDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionDetails
        [TestModelModel.TransactionDetail](T1.TransactionDetail_Detailid, T1.TransactionDetail_TransactionId, T1.TransactionDetail_Vendor, T1.TransactionDetail_ItemDescription)
    FROM (
        SELECT 
            T.Detailid AS TransactionDetail_Detailid, 
            T.TransactionId AS TransactionDetail_TransactionId, 
            T.Vendor AS TransactionDetail_Vendor, 
            T.ItemDescription AS TransactionDetail_ItemDescription, 
            True AS _from0
        FROM TestModelModelStoreContainer.TransactionDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelModelStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [TestModelModel.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM TestModelEntities.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelEntities.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [TestModelModel.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM TestModelModelStoreContainer.sysdiagrams AS T
    ) AS T1");
        }
    }
}
